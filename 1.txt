using ClosedXML.Excel;
using System.Data;
using System.Diagnostics;
using System.Globalization;

Stopwatch stopwatch = new Stopwatch();
stopwatch.Start();

string directoryPath = @"C:\Users\Tatiana\source\repos\MergeFiles\in";
string exportPath = @"C:\Users\Tatiana\source\repos\MergeFiles\out";
int maxRowsPerFile = 200000;
int sortByCol = 2;

DataTable combinedDataTable = new DataTable();
string[] files = Directory.GetFiles(directoryPath, "*.xlsx");

// Обработка файлов асинхронно
var tasks = files.Select(file => Task.Run(() => ProcessFile(file))).ToArray();
var results = await Task.WhenAll(tasks);

// Объединение всех DataTable в один
foreach (var result in results)
{
    combinedDataTable.Merge(result);
}

// Сортировка данных по первому столбцу (можно изменить на нужный вам)
var sortedDt = combinedDataTable.AsEnumerable()
                                   .OrderByDescending(row => DateTime.ParseExact(row.Field<string>(sortByCol - 1), "dd.MM.yyyy HH:mm:ss", CultureInfo.InvariantCulture))
                                   .CopyToDataTable();

// Разбиение на файлы по 200000 строк
await SplitAndSaveFiles(sortedDt, exportPath, maxRowsPerFile);

Console.WriteLine("Объединение и разбиение завершено.");

static DataTable ProcessFile(string filePath)
{
    var localDataTable = new DataTable();

    using (var workbook = new XLWorkbook(filePath))
    {
        var worksheet = workbook.Worksheet(1); // Читаем первый лист

        // Создаем структуру DataTable
        foreach (var header in worksheet.FirstRow().Cells())
        {
            localDataTable.Columns.Add(header.GetString());
        }

        // Добавляем строки данных
        foreach (var row in worksheet.RowsUsed().Skip(1)) // Пропускаем заголовок
        {
            var dataRow = localDataTable.NewRow();
            for (int i = 0; i < localDataTable.Columns.Count; i++)
            {
                dataRow[i] = row.Cell(i + 1).GetString(); // Индексы начинаются с 1
                var t = row.Cell(i + 1).GetFormattedString();
            }

            localDataTable.Rows.Add(dataRow);
        }
    }

    return localDataTable;
}

static async Task SplitAndSaveFiles(DataTable sortedRows, string outputFolderPath, int maxRowsPerFile)
{
    int fileCount = 0;

    for (int i = 0; i < sortedRows.Rows.Count; i += maxRowsPerFile)
    {
        var currentBatch = sortedRows.AsEnumerable().Skip(i).Take(maxRowsPerFile).CopyToDataTable();

        string outputFilePath = Path.Combine(outputFolderPath, $"output_{fileCount++}.xlsx");
        await Task.Run(() => SaveToExcel(currentBatch, outputFilePath));
    }
}

static void SaveToExcel(DataTable dataTable, string outputFilePath)
{
    using (var workbook = new XLWorkbook())
    {
        var worksheet = workbook.Worksheets.Add("Sheet1");

        // Записываем заголовки
        for (int col = 0; col < dataTable.Columns.Count; col++)
        {
            worksheet.Cell(1, col + 1).Value = dataTable.Columns[col].ColumnName;
        }

        // Записываем данные
        for (int row = 0; row < dataTable.Rows.Count; row++)
        {
            for (int col = 0; col < dataTable.Columns.Count; col++)
            {
                worksheet.Cell(row + 2, col + 1).Value = dataTable.Rows[row][col].ToString();
            }
        }
        workbook.SaveAs(outputFilePath);
    }
}


stopwatch.Stop();
Console.WriteLine(stopwatch.ElapsedMilliseconds/1000);

Console.ReadLine();