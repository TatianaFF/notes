public interface IFileProcessor
{
    string ProcessFiles(string[] filePaths);
}



public class CsvFileProcessor : IFileProcessor
{
    public string ProcessFiles(string[] filePaths)
    {
        var sb = new StringBuilder();
        
        foreach (var filePath in filePaths)
        {
            var lines = File.ReadAllLines(filePath);
            sb.AppendLine(string.Join(",", lines));
        }
        
        return sb.ToString();
    }
}

public class XlsxFileProcessor : IFileProcessor
{
    public string ProcessFiles(string[] filePaths)
    {
        var sb = new StringBuilder();
        
        foreach (var filePath in filePaths)
        {
            using (var package = new ExcelPackage(new FileInfo(filePath)))
            {
                var worksheet = package.Workbook.Worksheets[0];
                for (int row = 1; row <= worksheet.Dimension.End.Row; row++)
                {
                    for (int col = 1; col <= worksheet.Dimension.End.Column; col++)
                    {
                        sb.Append(worksheet.Cells[row, col].Text);
                        if (col < worksheet.Dimension.End.Column) sb.Append(",");
                    }
                    sb.AppendLine();
                }
            }
        }
        
        return sb.ToString();
    }
}



public class FileMerger
{
    private readonly IFileProcessor _fileProcessor;

    public FileMerger(IFileProcessor fileProcessor)
    {
        _fileProcessor = fileProcessor;
    }

    public void MergeFiles(string[] filePaths, string outputPath)
    {
        var mergedContent = _fileProcessor.ProcessFiles(filePaths);
        File.WriteAllText(outputPath, mergedContent);
    }
}






class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Введите путь к директории:");
        string directoryPath = Console.ReadLine();

        Console.WriteLine("Введите расширение файлов (.xlsx или .csv):");
        string extension = Console.ReadLine();

        if (extension != ".xlsx" && extension != ".csv")
        {
            Console.WriteLine("Неверное расширение.");
            return;
        }

        var filePaths = Directory.GetFiles(directoryPath, $"*{extension}");

        if (!filePaths.Any())
        {
            Console.WriteLine("Нет файлов для объединения.");
            return;
        }

        IFileProcessor fileProcessor = extension == ".xlsx" ? (IFileProcessor)new XlsxFileProcessor() : new CsvFileProcessor();
        var fileMerger = new FileMerger(fileProcessor);

        string outputPath = Path.Combine(directoryPath, $"merged{extension}");
        fileMerger.MergeFiles(filePaths, outputPath);

        Console.WriteLine($"Файлы объединены в: {outputPath}");
    }
}
